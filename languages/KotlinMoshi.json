{
    "modelStart": "{",
    "reservedKeywords": [
        "field",
        "dynamic",
        "delegate",
        "constructor",
        "by",
        "when",
        "var",
        "val",
        "typealias",
        "object",
        "is",
        "in",
        "fun",
        "as",
        "abstract",
        "continue",
        "for",
        "new",
        "null",
        "switch",
        "assert",
        "default",
        "if",
        "package",
        "synchronized",
        "boolean",
        "do",
        "goto",
        "private",
        "this",
        "break",
        "double",
        "implements",
        "protected",
        "throw",
        "byte",
        "else",
        "import",
        "public",
        "throws",
        "case",
        "enum",
        "instanceof",
        "return",
        "transient",
        "catch",
        "extends",
        "int",
        "short",
        "try",
        "char",
        "final",
        "interface",
        "static",
        "void",
        "class",
        "finally",
        "long",
        "strictfp",
        "volatile",
        "const",
        "float",
        "native",
        "super",
        "while",
        "file",
        "get",
        "init",
        "param",
        "property",
        "receiver",
        "set",
        "setparam",
        "where",
        "actual",
        "annotation",
        "companion",
        "const",
        "crossinline",
        "data",
        "enum",
        "expect",
        "external",
        "infix",
        "inline",
        "inner",
        "internal",
        "lateinit",
        "noinline",
        "open",
        "operator",
        "out",
        "reified",
        "sealed",
        "suspend",
        "tailrec",
        "vararg",
        "it"
    ],

    "dataTypes": {
        "arrayType": "List<<!ElementType!>>",
        "generic": "Any",
        "string": "String",
        "boolean": "Boolean",
        "float": "Double",
        "doubleType": "Double",
        "characterType": "Int",
        "longType": "Long",
        "int": "Int"
    },

    "modelDefinition": "\ndata class <!ModelName!> (<!ModelDefinitionProperty!>\n) ",
    "fileExtension": "kt",
    "codeForEachProperty": "\n\t\t@Json(\"<!JsonKeyName!>\")\n\t\t<!VarNameKey!> <!VarName!>: <!VarType!>",
    "codeForEachPropertyOptional": "\n\t\t@Json(\"<!JsonKeyName!>\")\n\t\t<!VarNameKey!> <!VarName!>: <!VarType!>?",
    "modelEnd": "}",
    "staticImports": "\nimport com.squareup.moshi.Json\nimport com.squareup.moshi.Moshi\nimport com.squareup.moshi.JsonAdapter\nimport com.squareup.moshi.kotlin.reflect.KotlinJsonAdapterFactory",
    "supportsCamelcasing": true,
    "methods": {
        "others": {
            "construction": {
                "name": "Create Utility",
                "signature": "\tcompanion object { \n\t\tfun create(json: String): <!ModelName!> ",
                "bodyStart": "{\n\t\t\tval moshi = Moshi.Builder()\n\t\t\t\t.add(KotlinJsonAdapterFactory())\n\t\t\t\t.build()\n\t\t\tval adapter = moshi.adapter(<!ModelName!>::class.java)\n",
                "bodyEnd": "\t\t\treturn adapter.fromJson(json)\n\t\t}\n\t}\n",
                "codeForEachProperty": "",
                "comment": "",
                "checked": "checked"
            },
            "toString": {
                "name": "toString",
                "signature": "\tfun toString(): String ",
                "bodyStart": "{\n\t\tval moshi = Moshi.Builder()\n\t\t\t\t.add(KotlinJsonAdapterFactory())\n\t\t\t\t.build()\n\t\tval adapter = moshi.adapter(<!ModelName!>::class.java)\n",
                "bodyEnd": "\t\treturn adapter.toJson(this)\n\t}\n",
                "codeForEachProperty": "",
                "comment": "",
                "checked": "checked"
            }
        }
    },
    "exampleCode": "## Example\n\n\n#### Decoding:\nThe example below shows how to decode an instance of `<!RootClassName>` type from JSON object.\n\n```kotlin\nval json = \"...\" // Your JSON String.\n\nval moshi = Moshi.Builder()\n\t.add(KotlinJsonAdapterFactory())\n\t.build()\nval adapter = moshi.adapter(<!RootClassName>::class.java)\nval model = adapter.fromJson(json)\n```\n\n\n#### Encoding: \nThe example below shows how to encode an instance of a simple `<!RootClassName>` type into a JSON object.\n\n```kotlin\nval model = <!RootClassName>()\n// Assign value to variables.\n\nval moshi = Moshi.Builder()\n\t.add(KotlinJsonAdapterFactory())\n\t.build()\nval adapter = moshi.adapter(<!RootClassName>::class.java)\nprintln(adapter.toJson(model))\n```"
}